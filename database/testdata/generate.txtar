env GOCACHE=$WORK/go/gocache
mkdir $GOCACHE
env GOMODCACHE=$WORK/go/pkg/mod
mkdir $GOMODCACHE
env HOME=$WORK

cd ./database
exec go mod init github.com/testing/testing
exec go mod tidy
exec go run . copyconf --all
exec go run . gengo --all
cd $WORK

cmp ./orders/postgres/sqlc.go golden-sqlc-go

-- database/orders/schema.sql --

CREATE TABLE IF NOT EXISTS orders(
    "order_id" varchar PRIMARY KEY,
    "status" int NOT NULL,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz
);

-- database/orders/query.sql --

-- name: GetOrders :many
SELECT * FROM orders;

-- golden-sqlc-go --
// Code is generated by helper script. DO NOT EDIT.
// This code is generated to replace the SQLC main codes inside sqlc.go
// SQLC:
//   version    : v1.25.0
//   config     : sqlc.yaml
//   sql_package: pgx/v5
//   database   : orders

package postgres

import (
	"context"
	"database/sql"

	"github.com/albertwidi/pkg/postgres"
)

type Queries struct {
	db *postgres.Postgres
}

// New returns a new queries instance of orders database.
func New(db *postgres.Postgres) *Queries {
	return &Queries{db: db}
}

// WithTransact wraps the queries inside a database transaction. The transaction will be committed if no error returned
// and automatically rolled back when an error occured.
func (q *Queries) WithTransact(ctx context.Context, iso sql.IsolationLevel, fn func(ctx context.Context, q *Queries) error) error {
	return q.db.Transact(ctx, iso, func(p *postgres.Postgres) error {
		return fn(ctx, New(p))
	})
}
-- golden-sqlc-test-go --
// Code is generated by helper script. DO NOT EDIT.

package postgres

import (
	"context"
	"log"
	"os"
	"testing"
	"time"

	"github.com/albertwidi/pkg/postgres"
)

const dbName = "orders"

var testPG *postgres.Postgres
var testHelper *postgres.TestHelper
var testCtx context.Context

func TestMain(m *testing.M) {
	var cancel context.CancelFunc
	testCtx, cancel = context.WithTimeout(context.Background(), time.Minute)
	err, code := run(testCtx, m)
	if err != nil {
		log.Println(err)
	}
	cancel()
	os.Exit(code)
}

func run(ctx context.Context, m *testing.M) (int, error) {
	var err error
	config := postgres.ConnectConfig{
		Driver:   "pgx",
		Username: "postgres",
		Password: "postgres",
		Host:     "localhost",
		Port:     "5432",
	}
	testHelper, err = postgres.Testing(ctx, config)
	if err != nil {
		return 1, err
	}
	defer testHelper.Cleanup(context.Background())

	testPG, err = testHelper.CreateDatabase(ctx, dbName)
	if err != nil {
		return 1, err
	}
	if err := testHelper.ApplySchemaFile(ctx, testPG, "../../database/orders/schema.sql"); err != nil {
		return 1, err
	}
	return m.Run(), nil
}
