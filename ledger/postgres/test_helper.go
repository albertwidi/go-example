// Code is generated by the helper script. DO NOT EDIT.

package postgres

import (
	"context"
	"os"
	"path/filepath"

	"github.com/albertwidi/pkg/postgres"
	testingpkg "github.com/albertwidi/pkg/testing"
	"github.com/albertwidi/pkg/testing/pgtest"
)

const dbName = "ledger"

// PrepareTest returns a new postgres connection with schema applied inside the database.
func PrepareTest(ctx context.Context) (*postgres.Postgres, error) {
	// Configuration for creating and preparing the database.
	config := postgres.ConnectConfig{
		Driver:   "pgx",
		Username: "postgres",
		Password: "postgres",
		Host:     "localhost",
		Port:     "5432",
	}
	pgconn, err := postgres.Connect(ctx, config)
	if err != nil {
		return nil, err
	}
	if err := pgtest.CreateDatabase(ctx, pgconn, dbName); err != nil {
		return nil, err
	}
	// Close the connection as we no-longer need it. We need it only to create the database.
	if err := pgconn.Close(); err != nil {
		return nil, err
	}

	// Create a new connection with the correct database name.
	config.DBName = dbName
	testConn, err := postgres.Connect(context.Background(), config)
	if err != nil {
		return nil, err
	}
	// Read the schema and apply the schema.
	repoRoot, err := testingpkg.RepositoryRoot()
	if err != nil {
		return nil, err
	}
	out, err := os.ReadFile(filepath.Join(repoRoot, "database/ledger/schema.sql"))
	if err != nil {
		return nil, err
	}
	_, err = testConn.Exec(context.Background(), string(out))
	if err != nil {
		return nil, err
	}
	return testConn, nil
}
