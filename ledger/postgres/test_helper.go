// Code is generated by the helper script. DO NOT EDIT.

package postgres

import (
	"context"
	"errors"
	"os"
	"path/filepath"

	"github.com/albertwidi/pkg/postgres"
	testingpkg "github.com/albertwidi/pkg/testing"
	"github.com/albertwidi/pkg/testing/pgtest"
)

type TestHelper struct {
	dbName string
	conn *postgres.Postgres
	pgtestHelper *pgtest.PGTest
}

func NewTestHelper() *TestHelper {
	return &TestHelper{
		dbName: "ledger",
		pgtestHelper: pgtest.New(),
	}
}

// PrepareTest prepares the designated postgres database by creating the database and applying the schema. The function returns a postgres connection
// to the database that can be used for testing purposes.
func (th *TestHelper) PrepareTest(ctx context.Context) (*Queries, error) {
	// Configuration for creating and preparing the database.
	config := postgres.ConnectConfig{
		Driver:   "pgx",
		Username: "postgres",
		Password: "postgres",
		Host:     "localhost",
		Port:     "5432",
	}
	pgconn, err := postgres.Connect(ctx, config)
	if err != nil {
		return nil, err
	}
	if err := pgtest.CreateDatabase(ctx, pgconn, th.dbName); err != nil {
		return nil, err
	}
	// Close the connection as we no-longer need it. We need it only to create the database.
	if err := pgconn.Close(); err != nil {
		return nil, err
	}

	// Create a new connection with the correct database name.
	config.DBName = th.dbName
	testConn, err := postgres.Connect(context.Background(), config)
	if err != nil {
		return nil, err
	}
	// Read the schema and apply the schema.
	repoRoot, err := testingpkg.RepositoryRoot()
	if err != nil {
		return nil, err
	}
	out, err := os.ReadFile(filepath.Join(repoRoot, "database/ledger/schema.sql"))
	if err != nil {
		return nil, err
	}
	_, err = testConn.Exec(context.Background(), string(out))
	if err != nil {
		return nil, err
	}
	// Assgign the connection for the test helper.
	th.conn = testConn
	return New(testConn), nil
}

// Close closes all connections from the test helper.
func (th *TestHelper) Close() error {
	var err error
	if th.conn != nil {
		errClose := th.conn.Close()
		if errClose != nil {
			err = errors.Join(err, errClose)
		}
	}
	errClose := th.pgtestHelper.Close()
	if errClose != nil {
		errors.Join(err ,errClose)
	}
	return err
}

// ForkPostgresSchema forks the sourceSchema with the underlying connection inside the Queries. The function will return a new connection
// with default search_path into the new schema. The schema name currently is random and cannot be defined by the user.
func (th *TestHelper) ForkPostgresSchema(ctx context.Context, q *Queries, sourceSchema string) (*Queries, error) {
	pg , err:= th.pgtestHelper.ForkSchema(ctx, q.db, sourceSchema)
	if err != nil {
		return nil, err
	}
	return New(pg), nil
}
